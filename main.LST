C51 COMPILER V9.53.0.0   MAIN                                                              11/18/2015 18:21:04 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "main.h"
   2          #include "port.h"
   3          #include <stdio.h>
   4          #include "uart.h"
   5          #include "print_bytes.h"
   6          #include "hardware_delay.h"
   7          #include "lcd.h"
   8          #include "spi.h"
   9          #include "SDcard.h"
  10          #include "Long_Serial_In.h"
  11          #include "Directory_Functions.h"
  12          #include "i2c.h"
  13          #include "sta013.h"
  14          
  15          
  16          
  17            
  18          
  19          
  20          extern uint32_t idata FirstRootDirSec;
  21          
  22          
  23          void main(void)
  24          {
  25   1        uint8_t error_flag;
  26   1        
  27   1        uint16_t number_of_entries;
  28   1        uint8_t xdata block_info[512];
  29   1      
  30   1        LED3=0;
  31   1        UART_Init();
  32   1        LCD_Init();
  33   1        SPI_master_init(400000); // Set clock rate to that speed in Hz
  34   1        error_flag = SDcard_init();
  35   1        printf("%-20s", "Mounting Drive");
  36   1        putchar(10);
  37   1        putchar(13);
  38   1        error_flag = mount_drive(block_info);
  39   1        number_of_entries = Print_Directory(FirstRootDirSec, block_info);
  40   1        LCD_Clear();
  41   1        LCD_Write(COMMAND, LINE1);
  42   1      
  43   1        LCD_Print(9,"init done");
  44   1        
  45   1      
  46   1        
  47   1      //  while(1)
  48   1      //  {
  49   1      //    current_sector = FirstRootDirSec;
  50   1      //    while(error_flag == NO_ERRORS)
  51   1      //    {
  52   1      //      do
  53   1      //      {
  54   1      //        printf("%-35s", "Enter a Block Number: ");
  55   1      //        block_number = long_serial_input();
C51 COMPILER V9.53.0.0   MAIN                                                              11/18/2015 18:21:04 PAGE 2   

  56   1      //        if(block_number > number_of_entries || block_number == 0)
  57   1      //        {
  58   1      //          printf("%-35s", "Number too large.\n\r");
  59   1      //        }
  60   1      //      }while(block_number > number_of_entries || block_number == 0);
  61   1      //      return_entry = Read_Dir_Entry(current_sector, block_number, block_info);
  62   1      //      printf("%-20s", "return_entry");
  63   1      //      printf("%8.8lX", return_entry);
  64   1      //      putchar(10);
  65   1      //      putchar(13);
  66   1      //      next_entry = return_entry & 0x0FFFFFFF;
  67   1      //      if(return_entry & 0x10000000)
  68   1      //      {     
  69   1      //        printf("%-20s", "was a directory");
  70   1      //        putchar(10);
  71   1      //        putchar(13);
  72   1      //        current_sector = first_sector(next_entry);
  73   1      //        printf("%-20s", "current_sector");
  74   1      //        printf("%8.8lX", current_sector);
  75   1      //        putchar(10);
  76   1      //        putchar(13);
  77   1      //        number_of_entries = Print_Directory(current_sector, block_info);
  78   1      //      }
  79   1      //      if((return_entry & 0x10000000) == 0 && block_number !=0)
  80   1      //      {
  81   1      //        printf("%-20s", "was a file");
  82   1      //        Open_File(next_entry, block_info);
  83   1      //        number_of_entries = Print_Directory(current_sector, block_info);
  84   1      //      }
  85   1      //      if(return_entry & 0x80000000)
  86   1      //      {
  87   1      //        error_flag = PRINT_ERROR;
  88   1      //      }
  89   1      //    }
  90   1      //    if(error_flag!= NO_ERRORS)
  91   1      //    {
  92   1      //      LED4 = 0;
  93   1      //      putchar(10);
  94   1      //      putchar(13);
  95   1      //      printf("%-10s", "ERROR! ");
  96   1      //      printf("%2.2bX", error_flag);
  97   1      //      putchar(10);
  98   1      //      putchar(13);
  99   1      //      while(1);
 100   1      //    }
 101   1      //  }
 102   1      }
 103          
 104              
 105              
 106              
 107              
 108              
 109              
 110              
 111              
 112              
 113              
 114              
 115          //    if(error_flag != NO_ERRORS)
 116          //    {
 117          //      LED4 = 0;
C51 COMPILER V9.53.0.0   MAIN                                                              11/18/2015 18:21:04 PAGE 3   

 118          //      LCD_Clear();
 119          //      LCD_Write(COMMAND, LINE1);
 120          //      LCD_Print(1, &error_flag);
 121          //      
 122          //      delay_ms(1000); 
 123          //        printf("%2.2bX ",error_flag);       
 124          //      putchar(10);
 125          //      putchar(13);
 126          //      delay_ms(1000);
 127          //    }
 128          //    else
 129          //    {
 130          //      delay_ms(1000);
 131          //      LCD_Clear();
 132          //      LCD_Write(COMMAND, LINE1);
 133          //      LCD_Print(13, "Enter a Block");
 134          //      LCD_Write(COMMAND, LINE2);
 135          //      LCD_Print(8, "Number: ");
 136          //      //delay_ms(3000);
 137          //      
 138          //      printf("%-35s", "Enter a Block Number");
 139          //      
 140          //      block_number = long_serial_input();   // returns uint32_t 
 141          //      LCD_Clear();
 142          //      
 143          //      error_flag = read_block(block_number, block_info);
 144          //      LCD_Print(13, "Read Success!");
 145          //      print_memory(block_info,512);
 146          //      
 147          //    }
 148          
 149          //    
 150          //    
 151          //    
 152          //    
 153          ////    LCD_Write(COMMAND, LINE1);
 154          ////    LCD_Print(16, "Coltons and Matt");
 155          ////    LCD_Write(COMMAND, LINE2);
 156          ////    LCD_Print(15, "hews LCD Works!");
 157          ////    delay_ms(3000);
 158          ////    LCD_Clear();
 159          //  }
 160          
 161          //}
 162          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    101    ----
   CONSTANT SIZE    =     31    ----
   XDATA SIZE       =   ----     512
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
