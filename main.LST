C51 COMPILER V9.53.0.0   MAIN                                                              11/06/2015 19:13:49 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "main.h"
   2          #include "port.h"
   3          #include <stdio.h>
   4          #include "uart.h"
   5          #include "print_bytes.h"
   6          #include "hardware_delay.h"
   7          #include "lcd.h"
   8          #include "spi.h"
   9          #include "SDcard.h"
  10          #include "Long_Serial_In.h"
  11          #include "read_sector.h"
  12          #include "Directory_Functions.h"
  13          
  14          
  15          
  16            
  17          
  18          
  19          extern uint32_t idata FirstRootDirSec;
  20          extern uint32_t idata current_sector;
  21          
  22          
  23          void main(void)
  24          {
  25   1        uint8_t error_flag;
  26   1        uint32_t block_number, return_entry, next_entry, next_sector;
  27   1        uint16_t number_of_entries;
  28   1        uint8_t xdata block_info[512];
  29   1      
  30   1        LED3=0;
  31   1        UART_Init();
  32   1        LCD_Init();
  33   1        SPI_master_init(400000); // Set clock rate to that speed in Hz
  34   1        error_flag = SDcard_init();
  35   1        printf("%-20s", "Mounting Drive");
  36   1        putchar(10);
  37   1        putchar(13);
  38   1        error_flag = mount_drive();
  39   1        number_of_entries = Print_Directory(FirstRootDirSec, block_info);
  40   1        next_sector = FirstRootDirSec;
  41   1        LCD_Clear();
  42   1        LCD_Write(COMMAND, LINE1);
  43   1      
  44   1        LCD_Print(9,"init done");
  45   1        while(1)
  46   1        {
  47   2          current_sector = FirstRootDirSec;
  48   2          while(error_flag == NO_ERRORS)
  49   2          {
  50   3            do
  51   3            {
  52   4              printf("%-35s", "Enter a Block Number: ");
  53   4              block_number = long_serial_input();
  54   4              if(block_number > number_of_entries || block_number == 0)
  55   4              {
C51 COMPILER V9.53.0.0   MAIN                                                              11/06/2015 19:13:49 PAGE 2   

  56   5                printf("%-35s", "Number too large.\n\r");
  57   5              }
  58   4            }while(block_number > number_of_entries || block_number == 0);
  59   3            return_entry = Read_Dir_Entry(next_sector, block_number, block_info);
  60   3            printf("%-20s", "return_entry");
  61   3            printf("%8.8lX", return_entry);
  62   3            putchar(10);
  63   3            putchar(13);
  64   3            next_entry = return_entry & 0x0FFFFFFF;
  65   3            if(return_entry & 0x10000000)
  66   3            {     
  67   4              printf("%-20s", "was a directory");
  68   4              putchar(10);
  69   4              putchar(13);
  70   4              next_sector = first_sector(next_entry);
  71   4              current_sector = next_sector;
  72   4              printf("%-20s", "next_sector");
  73   4              printf("%8.8lX", next_sector);
  74   4              putchar(10);
  75   4              putchar(13);
  76   4              number_of_entries = Print_Directory(next_sector, block_info);
  77   4            }
  78   3            if((return_entry & 0x10000000) == 0 && block_number !=0)
  79   3            {
  80   4              printf("%-20s", "was a file");
  81   4              Open_File(next_entry, block_info);
  82   4              number_of_entries = Print_Directory(current_sector, block_info);
  83   4              next_sector = current_sector;
  84   4            }
  85   3            if(return_entry & 0x80000000)
  86   3            {
  87   4              error_flag = PRINT_ERROR;
  88   4            }
  89   3          }
  90   2          if(error_flag!= NO_ERRORS)
  91   2          {
  92   3            putchar(10);
  93   3            putchar(13);
  94   3            printf("%-10s", "ERROR! ");
  95   3            printf("%2.2bX", error_flag);
  96   3            putchar(10);
  97   3            putchar(13);
  98   3            while(1);
  99   3          }
 100   2        }
 101   1      }
 102          
 103              
 104              
 105              
 106              
 107              
 108              
 109              
 110              
 111              
 112              
 113              
 114          //    if(error_flag != NO_ERRORS)
 115          //    {
 116          //      LED4 = 0;
 117          //      LCD_Clear();
C51 COMPILER V9.53.0.0   MAIN                                                              11/06/2015 19:13:49 PAGE 3   

 118          //      LCD_Write(COMMAND, LINE1);
 119          //      LCD_Print(1, &error_flag);
 120          //      
 121          //      delay_ms(1000); 
 122          //        printf("%2.2bX ",error_flag);       
 123          //      putchar(10);
 124          //      putchar(13);
 125          //      delay_ms(1000);
 126          //    }
 127          //    else
 128          //    {
 129          //      delay_ms(1000);
 130          //      LCD_Clear();
 131          //      LCD_Write(COMMAND, LINE1);
 132          //      LCD_Print(13, "Enter a Block");
 133          //      LCD_Write(COMMAND, LINE2);
 134          //      LCD_Print(8, "Number: ");
 135          //      //delay_ms(3000);
 136          //      
 137          //      printf("%-35s", "Enter a Block Number");
 138          //      
 139          //      block_number = long_serial_input();   // returns uint32_t 
 140          //      LCD_Clear();
 141          //      
 142          //      error_flag = read_block(block_number, block_info);
 143          //      LCD_Print(13, "Read Success!");
 144          //      print_memory(block_info,512);
 145          //      
 146          //    }
 147          
 148          //    
 149          //    
 150          //    
 151          //    
 152          ////    LCD_Write(COMMAND, LINE1);
 153          ////    LCD_Print(16, "Coltons and Matt");
 154          ////    LCD_Write(COMMAND, LINE2);
 155          ////    LCD_Print(15, "hews LCD Works!");
 156          ////    delay_ms(3000);
 157          ////    LCD_Clear();
 158          //  }
 159          
 160          //}
 161          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    653    ----
   CONSTANT SIZE    =    160    ----
   XDATA SIZE       =   ----     512
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      19
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
