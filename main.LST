C51 COMPILER V9.53.0.0   MAIN                                                              12/02/2015 18:12:42 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "main.h"
   2          #include "port.h"
   3          #include <stdio.h>
   4          #include "uart.h"
   5          #include "print_bytes.h"
   6          #include "hardware_delay.h"
   7          #include "lcd.h"
   8          #include "spi.h"
   9          #include "SDcard.h"
  10          #include "Long_Serial_In.h"
  11          #include "Directory_Functions.h"
  12          #include "i2c.h"
  13          #include "sta013.h"
  14          
  15          
  16          
  17          
  18            
  19          
  20          extern uint8_t code CONFIG, CONFIG2;
  21          extern uint32_t idata FirstRootDirSec;
  22          
  23          
  24          void main(void)
  25          {
  26   1        uint8_t error_flag, array_name[2];
  27   1        
  28   1        uint16_t number_of_entries;
  29   1        uint8_t xdata block_info[512];
  30   1      
  31   1        trig = 1;
  32   1        LED1=0;
  33   1        UART_Init();
  34   1        LCD_Init();
  35   1        SPI_master_init(400000); // Set clock rate to that speed in Hz
  36   1        error_flag = SDcard_init();
  37   1        printf("%-20s", "Mounting Drive");
  38   1        putchar(10);
  39   1        putchar(13);
  40   1        error_flag = mount_drive(block_info);
  41   1        number_of_entries = Print_Directory(FirstRootDirSec, block_info);
  42   1        LCD_Clear();
  43   1        LCD_Write(COMMAND, LINE1);
  44   1      
  45   1        LCD_Print(9,"init done");
  46   1        LED2=0;
  47   1        array_name[0] = 0x01;
  48   1        array_name[1] = 0xAC;
  49   1        error_flag = test_I2C(array_name);
  50   1      if (error_flag != NO_ERRORS)
  51   1        {
  52   2          LED4=0;
  53   2          printf("%-10s", "ERROR1! ");
  54   2          printf("%2.2bX", error_flag);
  55   2          putchar(10);
C51 COMPILER V9.53.0.0   MAIN                                                              12/02/2015 18:12:42 PAGE 2   

  56   2          putchar(13);
  57   2        }
  58   1      
  59   1        error_flag = config_file();
  60   1        if (error_flag != NO_ERRORS)
  61   1        {
  62   2          LED4=0;
  63   2          printf("%-10s", "config err ");
  64   2          printf("%2.2bX", error_flag);
  65   2          putchar(10);
  66   2          putchar(13);
  67   2        }
  68   1          
  69   1      
  70   1        LED3=0;
  71   1        
  72   1      
  73   1        if (error_flag != NO_ERRORS)
  74   1        {
  75   2          LED4=0;
  76   2          printf("%-10s", "test_i2c err ");
  77   2          printf("%2.2bX", error_flag);
  78   2          putchar(10);
  79   2          putchar(13);
  80   2        }
  81   1        
  82   1        while(1);
  83   1        
  84   1        
  85   1        
  86   1      //  while(1)
  87   1      //  {
  88   1      //    current_sector = FirstRootDirSec;
  89   1      //    while(error_flag == NO_ERRORS)
  90   1      //    {
  91   1      //      do
  92   1      //      {
  93   1      //        printf("%-35s", "Enter a Block Number: ");
  94   1      //        block_number = long_serial_input();
  95   1      //        if(block_number > number_of_entries || block_number == 0)
  96   1      //        {
  97   1      //          printf("%-35s", "Number too large.\n\r");
  98   1      //        }
  99   1      //      }while(block_number > number_of_entries || block_number == 0);
 100   1      //      return_entry = Read_Dir_Entry(current_sector, block_number, block_info);
 101   1      //      printf("%-20s", "return_entry");
 102   1      //      printf("%8.8lX", return_entry);
 103   1      //      putchar(10);
 104   1      //      putchar(13);
 105   1      //      next_entry = return_entry & 0x0FFFFFFF;
 106   1      //      if(return_entry & 0x10000000)
 107   1      //      {     
 108   1      //        printf("%-20s", "was a directory");
 109   1      //        putchar(10);
 110   1      //        putchar(13);
 111   1      //        current_sector = first_sector(next_entry);
 112   1      //        printf("%-20s", "current_sector");
 113   1      //        printf("%8.8lX", current_sector);
 114   1      //        putchar(10);
 115   1      //        putchar(13);
 116   1      //        number_of_entries = Print_Directory(current_sector, block_info);
 117   1      //      }
C51 COMPILER V9.53.0.0   MAIN                                                              12/02/2015 18:12:42 PAGE 3   

 118   1      //      if((return_entry & 0x10000000) == 0 && block_number !=0)
 119   1      //      {
 120   1      //        printf("%-20s", "was a file");
 121   1      //        Open_File(next_entry, block_info);
 122   1      //        number_of_entries = Print_Directory(current_sector, block_info);
 123   1      //      }
 124   1      //      if(return_entry & 0x80000000)
 125   1      //      {
 126   1      //        error_flag = PRINT_ERROR;
 127   1      //      }
 128   1      //    }
 129   1      //    if(error_flag!= NO_ERRORS)
 130   1      //    {
 131   1      //      LED4 = 0;
 132   1      //      putchar(10);
 133   1      //      putchar(13);
 134   1      //      printf("%-10s", "ERROR! ");
 135   1      //      printf("%2.2bX", error_flag);
 136   1      //      putchar(10);
 137   1      //      putchar(13);
 138   1      //      while(1);
 139   1      //    }
 140   1      //  }
 141   1      }
 142          
 143              
 144              
 145              
 146              
 147              
 148              
 149              
 150              
 151              
 152              
 153              
 154          //    if(error_flag != NO_ERRORS)
 155          //    {
 156          //      LED4 = 0;
 157          //      LCD_Clear();
 158          //      LCD_Write(COMMAND, LINE1);
 159          //      LCD_Print(1, &error_flag);
 160          //      
 161          //      delay_ms(1000); 
 162          //        printf("%2.2bX ",error_flag);       
 163          //      putchar(10);
 164          //      putchar(13);
 165          //      delay_ms(1000);
 166          //    }
 167          //    else
 168          //    {
 169          //      delay_ms(1000);
 170          //      LCD_Clear();
 171          //      LCD_Write(COMMAND, LINE1);
 172          //      LCD_Print(13, "Enter a Block");
 173          //      LCD_Write(COMMAND, LINE2);
 174          //      LCD_Print(8, "Number: ");
 175          //      //delay_ms(3000);
 176          //      
 177          //      printf("%-35s", "Enter a Block Number");
 178          //      
 179          //      block_number = long_serial_input();   // returns uint32_t 
C51 COMPILER V9.53.0.0   MAIN                                                              12/02/2015 18:12:42 PAGE 4   

 180          //      LCD_Clear();
 181          //      
 182          //      error_flag = read_block(block_number, block_info);
 183          //      LCD_Print(13, "Read Success!");
 184          //      print_memory(block_info,512);
 185          //      
 186          //    }
 187          
 188          //    
 189          //    
 190          //    
 191          //    
 192          ////    LCD_Write(COMMAND, LINE1);
 193          ////    LCD_Print(16, "Coltons and Matt");
 194          ////    LCD_Write(COMMAND, LINE2);
 195          ////    LCD_Print(15, "hews LCD Works!");
 196          ////    delay_ms(3000);
 197          ////    LCD_Clear();
 198          //  }
 199          
 200          //}
 201          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    269    ----
   CONSTANT SIZE    =     79    ----
   XDATA SIZE       =   ----     512
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
