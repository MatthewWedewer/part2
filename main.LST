C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "main.h"
   2          #include "port.h"
   3          #include <stdio.h>
   4          #include "uart.h"
   5          #include "print_bytes.h"
   6          #include "hardware_delay.h"
   7          #include "lcd.h"
   8          #include "spi.h"
   9          #include "SDcard.h"
  10          #include "Long_Serial_In.h"
  11          #include "Directory_Functions.h"
  12          #include "i2c.h"
  13          #include "sta013.h"
  14          
  15          
  16          
  17          
  18            
  19          extern uint16_t idata BPB_BytesPerSec;
  20          extern uint8_t code CONFIG, CONFIG2;
  21          extern uint32_t idata FirstRootDirSec;
  22          
  23          uint8_t idata temp8;
  24          uint32_t idata state_g, sector_offset, cluster_g, play_status;
  25          
  26          uint16_t idata index1_g, index2_g;
  27          uint32_t idata sector_base_g, return_entry, next_entry, block_number, sector;
  28          
  29          uint8_t xdata buff1[512];
  30          uint8_t xdata buff2[512];
  31          
  32          
  33          
  34          
  35          
  36          void timer2_ISR(void) interrupt 5
  37          { 
  38   1      
  39   1        TF2 = 0;
  40   1        TR0 = 0;
  41   1        TH0 = TIMER0H;
  42   1        TL0 = TIMER0L;
  43   1        TF0 = 0;
  44   1        TR0 = 1;
  45   1        
  46   1        
  47   1        if(state_g == LOAD_BUFFER_1)
  48   1        {
  49   2          if(sector_offset >= 64)
  50   2          {
  51   3            state_g = FIND_CLUSTER_1;
  52   3          }
  53   2        }
  54   1      
  55   1        if(state_g == LOAD_BUFFER_2)
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 2   

  56   1        {
  57   2          if(sector_offset >= 64)
  58   2          {
  59   3            state_g = FIND_CLUSTER_2;
  60   3          }
  61   2        }
  62   1      
  63   1      
  64   1        switch(state_g)
  65   1        {
  66   2          // Data Send 1
  67   2          case DATA_SEND_1:
  68   2          {
  69   3            LED1 = 0;
  70   3            LED2 = 1;
  71   3            LED3 = 1;
  72   3            LED4 = 1;
  73   3            spi_en = 1;
  74   3            trig = 0;
  75   3            while((DATA_REQ == ACTIVE) && (TF0 == 0))                 
  76   3            {
  77   4              SPI_transfer_ISR(buff1[index1_g], & temp8);               // What is temp8
  78   4              index1_g++;                                               // Loosing last bit?
  79   4              if(index1_g > 511) // Buffer 1 empty
  80   4              {
  81   5                if(index2_g >511)
  82   5                {
  83   6                  if(play_status == 3)                                  
  84   6                  {
  85   7                    play_status = 0;
  86   7                  }
  87   6                  else
  88   6                  {
  89   7                    state_g = LOAD_BUFFER_2; // Buff 2 and Buff 1 empty
  90   7                  }
  91   6                }                                                       
  92   5                else
  93   5                {
  94   6                  state_g = DATA_SEND_2; // BUFF 1 empty                //Seems like this is when buffer 1 still has stuff
  95   6                }
  96   5                TF0 = 1;
  97   5              }       // What does this do? is this the interupt for the whole system to keep pace
  98   4            }
  99   3            if((DATA_REQ == INACTIVE) && (state_g == DATA_SEND_1))
 100   3            {
 101   4              printf("INACTIVE 1\n\r");
 102   4              if(index2_g > 511) // Buffer 2 is empty
 103   4              {
 104   5                state_g = LOAD_BUFFER_2; // DR inactive and BUFF 2 empty
 105   5              }
 106   4              else
 107   4              {
 108   5                state_g = DATA_IDLE_1; // DR interupt
 109   5              }
 110   4            }
 111   3            if(DATA_REQ == INACTIVE)
 112   3            {
 113   4              printf("INACTIVE 2\n\r");
 114   4            }
 115   3            spi_en = 0;
 116   3            break;
 117   3          }
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 3   

 118   2          
 119   2          //Load Buffer 1
 120   2          case LOAD_BUFFER_1:
 121   2          {
 122   3            LED1 = 1;
 123   3            LED2 = 1;
 124   3            LED3 = 1;
 125   3            LED4 = 1;
 126   3            //printf("LOAD_BUFFER_1\n\r");
 127   3            sector = sector_base_g + sector_offset;
 128   3            read_sector_ISR(sector, buff1);
 129   3            //printf("%8.8lX", sector);
 130   3            sector_offset++;
 131   3            state_g = DATA_IDLE_2;
 132   3            index1_g = 0;
 133   3            
 134   3            break;
 135   3          }
 136   2          
 137   2          // Find Cluster 1
 138   2          case FIND_CLUSTER_1:
 139   2          {
 140   3            LED1 = 1;
 141   3            LED2 = 0;
 142   3            LED3 = 1;
 143   3            LED4 = 1;
 144   3            //printf("FIND_CLUSTER_1\n\r");
 145   3            cluster_g = find_next_cluster_ISR(cluster_g, buff1);
 146   3            if(cluster_g == 0x0FFFFFFF) // Last cluster
 147   3            {
 148   4              printf("DONE\n\r");
 149   4              play_status = 3;
 150   4              state_g = DATA_IDLE_2;
 151   4            }
 152   3            else
 153   3            {
 154   4              sector_base_g = first_sector_ISR(cluster_g);
 155   4              sector_offset = 0;
 156   4              state_g = DATA_IDLE_2;
 157   4            }
 158   3            break;
 159   3          }
 160   2          
 161   2          case DATA_IDLE_1:
 162   2          {
 163   3            LED1 = 1;
 164   3        LED2 = 1;
 165   3        LED3 = 1;
 166   3        LED4 = 1;
 167   3            //printf("DATA_IDLE_1\n\r");
 168   3            if(DATA_REQ == ACTIVE)
 169   3            {
 170   4              state_g = DATA_SEND_1;
 171   4            }
 172   3            break;
 173   3          }
 174   2              
 175   2          // Data Send 2
 176   2          case DATA_SEND_2:
 177   2          {
 178   3            LED1 = 1;
 179   3            LED2 = 1;
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 4   

 180   3            LED3 = 0;
 181   3            LED4 = 1;
 182   3            //printf("DATA_SEND_2\n\r");
 183   3            spi_en = 1;
 184   3            while((DATA_REQ == ACTIVE) && (TF0 == 0))                 // Can DATA_REQ go inactive while in the loop
 185   3            {
 186   4              SPI_transfer_ISR(buff1[index2_g], & temp8);               // What is temp8
 187   4              index2_g++;
 188   4              if(index2_g > 511) // Buffer 2 empty
 189   4              {
 190   5                if(index1_g > 511) // Buffer 1 empty
 191   5                {
 192   6                  if(play_status == 3)                                  // Works only if after FIND_CLUSTER. why?
 193   6                  {
 194   7                    play_status = 0;
 195   7                  }
 196   6                  else
 197   6                  {
 198   7                    state_g = LOAD_BUFFER_1; // Buff 1 and Buff 2 empty
 199   7                  }
 200   6                }                                                       // No FIND_CLUSTER
 201   5                else
 202   5                {
 203   6                  state_g = DATA_SEND_1; // BUFF 2 empty                //Seems like this is when buffer 2 still has stuff
 204   6                }
 205   5                TF0 = 1;                                                // What does this do? is this the interupt for the whole system to ke
             -ep pace
 206   5              }
 207   4            }
 208   3            if((DATA_REQ == INACTIVE) && (state_g == DATA_SEND_2))
 209   3            {
 210   4              printf("INACTIVE 2\n\r");
 211   4              if(index1_g > 511) // Buffer 1 is empty
 212   4              {
 213   5                state_g = LOAD_BUFFER_1; // DR inactive and BUFF 1 empty
 214   5              }
 215   4              else
 216   4              {
 217   5                state_g = DATA_IDLE_2; // DR interupt
 218   5              }
 219   4            }
 220   3            if(DATA_REQ == INACTIVE)
 221   3            {
 222   4              printf("INACTIVE 2\n\r");
 223   4            }
 224   3            
 225   3            spi_en = 0;
 226   3            break;
 227   3          }
 228   2          
 229   2          //Load Buffer 2
 230   2          case LOAD_BUFFER_2:
 231   2          {
 232   3            LED1 = 1;
 233   3        LED2 = 1;
 234   3        LED3 = 1;
 235   3        LED4 = 1;
 236   3            //printf("LOAD_BUFFER_2\n\r");
 237   3            sector = sector_base_g + sector_offset;
 238   3            read_sector_ISR(sector, buff2);
 239   3            sector_offset++;
 240   3            state_g = DATA_IDLE_1;
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 5   

 241   3            index2_g = 0;
 242   3            break;
 243   3          }
 244   2          
 245   2          // Find Cluster 2
 246   2          case FIND_CLUSTER_2:
 247   2          {
 248   3            LED1 = 1;
 249   3        LED2 = 1;
 250   3        LED3 = 1;
 251   3        LED4 = 0;
 252   3            //printf("FIND_CLUSTER_2\n\r");
 253   3            cluster_g = find_next_cluster_ISR(cluster_g, buff2);
 254   3            if(cluster_g == 0x0FFFFFFF)
 255   3            {
 256   4              play_status = 3;
 257   4              state_g = DATA_IDLE_1;
 258   4            }
 259   3            else
 260   3            {
 261   4              sector_base_g = first_sector_ISR(cluster_g);
 262   4              sector_offset = 0;
 263   4              state_g = DATA_IDLE_1;
 264   4            }
 265   3            break;
 266   3          }
 267   2          
 268   2          case DATA_IDLE_2:
 269   2          {
 270   3            LED1 = 1;
 271   3        LED2 = 1;
 272   3        LED3 = 1;
 273   3        LED4 = 1;
 274   3            //printf("DATA_IDLE_2\n\r");
 275   3            if(DATA_REQ == ACTIVE)
 276   3            {
 277   4              state_g = DATA_SEND_2;
 278   4            }
 279   3            break;
 280   3          }           
 281   2        }
 282   1        trig = 1;
 283   1      }
 284          
 285          
 286          
 287          
 288          
 289          
 290          
 291          
 292          void main(void)
 293          {
 294   1        uint8_t error_flag, array_name[2];
 295   1        
 296   1        
 297   1        uint16_t number_of_entries;
 298   1        
 299   1        CKCON0 = 0x01;
 300   1      
 301   1        trig = 1;
 302   1        LED1=0;
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 6   

 303   1        UART_Init();
 304   1        LCD_Init();
 305   1        SPI_master_init(400000); // Set clock rate to that speed in Hz
 306   1        error_flag = SDcard_init();
 307   1        
 308   1        printf("%-20s", "Mounting Drive");
 309   1        putchar(10);
 310   1        putchar(13);
 311   1        error_flag = mount_drive(buff1);
 312   1        
 313   1        LCD_Clear();
 314   1        LCD_Write(COMMAND, LINE1);
 315   1        LCD_Print(9,"init done");
 316   1        
 317   1        LED2=0;
 318   1        error_flag = config_file();
 319   1        if (error_flag != NO_ERRORS)
 320   1        {
 321   2          LED4=0;
 322   2          printf("%-10s", "config err ");
 323   2          printf("%2.2bX", error_flag);
 324   2          putchar(10);
 325   2          putchar(13);
 326   2        }
 327   1      
 328   1        array_name[0] = 0x01;
 329   1        array_name[1] = 0xAC;
 330   1        error_flag = test_I2C(array_name);
 331   1        if (error_flag != NO_ERRORS)
 332   1        {
 333   2          LED4=0;
 334   2          printf("%-10s", "ERROR1! ");
 335   2          printf("%2.2bX", error_flag);
 336   2          putchar(10);
 337   2          putchar(13);
 338   2        }
 339   1      
 340   1      
 341   1        SPI_master_init(15000000); // Set clock rate to that speed in Hz
 342   1          
 343   1      
 344   1        LED3=0;
 345   1        
 346   1      
 347   1        if (error_flag != NO_ERRORS)
 348   1        {
 349   2          LED4=0;
 350   2          printf("%-10s", "test_i2c err ");
 351   2          printf("%2.2bX", error_flag);
 352   2          putchar(10);
 353   2          putchar(13);
 354   2        }
 355   1        T2CON = 0x01;  // 16 bit auto reload mode
 356   1        TH2 = TIMER2H;
 357   1        RCAP2H = TIMER2H; // auto reload TH2
 358   1        TL2 = TIMER2L;
 359   1        RCAP2L = TIMER2L; // auto reload TL2
 360   1        TF0 = 0;
 361   1        TR2 = 0;
 362   1        //TH0 = TIMER0H;
 363   1        //TL0 = TIMER0L;
 364   1          
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 7   

 365   1        //TMOD |= 0x01;
 366   1        
 367   1        ET2 = 1;                      /* Enable Timer 2 Interrupts */
 368   1        EA = 1;                       /* Global Interrupt Enable */
 369   1      
 370   1      
 371   1      
 372   1      
 373   1      
 374   1      
 375   1      
 376   1      
 377   1        CKCON0 = 0x01;
 378   1      
 379   1      number_of_entries = Print_Directory(FirstRootDirSec, buff1);
 380   1      
 381   1      /************************
 382   1      **        Loop         **
 383   1      ************************/
 384   1      
 385   1        
 386   1        while(1)
 387   1        { 
 388   2          sector_base_g = FirstRootDirSec;
 389   2          while(error_flag == NO_ERRORS)
 390   2          {
 391   3            do
 392   3            {
 393   4              printf("%-35s", "Enter a Block Number: ");
 394   4              block_number = long_serial_input();
 395   4              if(block_number > number_of_entries || block_number == 0)
 396   4              {
 397   5                printf("%-35s", "Number too large.\n\r");
 398   5              }
 399   4            }while(block_number > number_of_entries || block_number == 0);
 400   3            return_entry = Read_Dir_Entry(sector_base_g, block_number, buff1);
 401   3            printf("%-20s", "return_entry");
 402   3            printf("%8.8lX", return_entry);
 403   3            putchar(10);
 404   3            putchar(13);
 405   3            next_entry = return_entry & 0x0FFFFFFF;
 406   3            if(return_entry & 0x10000000)
 407   3            {     
 408   4              printf("%-20s", "was a directory");
 409   4              putchar(10);
 410   4              putchar(13);
 411   4              sector_base_g = first_sector(next_entry);
 412   4              printf("%-20s", "sector_base_g");
 413   4              printf("%8.8lX", sector_base_g);
 414   4              putchar(10);
 415   4              putchar(13);
 416   4              number_of_entries = Print_Directory(sector_base_g, buff1);
 417   4            }
 418   3            if((return_entry & 0x10000000) == 0 && block_number !=0)
 419   3            {
 420   4              sector_offset = 0;
 421   4              printf("%-20s", "was a file");
 422   4              //Open_File(next_entry, buff1);
 423   4              sector_base_g = first_sector(next_entry);
 424   4              sector = sector_base_g + sector_offset;
 425   4              read_sector(sector, buff1);
 426   4              sector_offset++;
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 8   

 427   4              sector = sector_base_g + sector_offset;
 428   4              read_sector(sector, buff2);
 429   4              sector_offset++;
 430   4              state_g = DATA_SEND_1;
 431   4      
 432   4      
 433   4              
 434   4              play_status = 1; // Run
 435   4              index1_g = 0;
 436   4              index2_g = 0;
 437   4              TF2 = 0;
 438   4              TR2 = 1;
 439   4              while(play_status != 0)
 440   4              { 
 441   5                
 442   5                //PCON = 1; // Idle mode???
 443   5                
 444   5              }
 445   4              TR2 = 0;
 446   4              
 447   4              number_of_entries = Print_Directory(FirstRootDirSec, buff1); //need to reload the old buff
 448   4            }
 449   3            if(return_entry & 0x80000000)
 450   3            {
 451   4              error_flag = PRINT_ERROR;
 452   4            }
 453   3          }
 454   2          if(error_flag!= NO_ERRORS)
 455   2          {
 456   3            LED4 = 0;
 457   3            putchar(10);
 458   3            putchar(13);
 459   3            printf("%-10s", "ERROR! ");
 460   3            printf("%2.2bX", error_flag);
 461   3            putchar(10);
 462   3            putchar(13);
 463   3            while(1);
 464   3          }
 465   2        }
 466   1      }
 467              
 468              
 469              
 470              
 471              
 472          
 473          
 474          
 475          
 476          
 477              
 478              
 479              
 480              
 481              
 482          //    
 483          //    
 484          //    if(state_g == LOAD_BUFFER_1)
 485          //    {
 486          //      if(sector_offset >= 64)
 487          //      {
 488          //        state_g = FIND_CLUSTER_1;
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 9   

 489          //      }
 490          //    }
 491          
 492          //    if(state_g == LOAD_BUFFER_2)
 493          //    {
 494          //      if(sector_offset >= 64)
 495          //      {
 496          //        state_g = FIND_CLUSTER_2;
 497          //      }
 498          //    }
 499          
 500          
 501          //    switch(state_g)
 502          //    {
 503          //      // Data Send 1
 504          //      case DATA_SEND_1:
 505          //      {
 506          //        spi_en = 1;
 507          //        while((DATA_REQ == ACTIVE) && (TF0 == 0))                 // Can DATA_REQ go inactive while in the loop
 508          //        {
 509          //          SPI_transfer_ISR(buff1[index1_g], & temp8);               // What is temp8
 510          //          index1_g++;
 511          //          if(index1_g > 511) // Buffer 1 empty
 512          //          {
 513          //            if(play_status == 3)                                  // Works only if after FIND_CLUSTER. why?
 514          //            {
 515          //              play_status = 0;
 516          //              // state_g = DATA_SEND_2;                           // I think this is where it goes
 517          //            }
 518          //            else
 519          //            {
 520          //              state_g = LOAD_BUFFER_2; // Buff 2 and Buff 1 empty
 521          //            }
 522          //          }                                                       // No FIND_CLUSTER
 523          //          else
 524          //          {
 525          //            state_g = DATA_SEND_2; // BUFF 1 empty                //Seems like this is when buffer 1 still has stuff
 526          //          }
 527          //          TF0 = 1;                                                // What does this do? is this the interupt for the whole system to 
             -keep pace
 528          //        }
 529          //        if((DATA_REQ == INACTIVE) && (state_g == DATA_SEND_1))
 530          //        {
 531          //          if(index2_g > 511) // Buffer 2 is empty
 532          //          {
 533          //            state_g = LOAD_BUFFER_2; // DR inactive and BUFF 2 empty
 534          //          }
 535          //          else
 536          //          {
 537          //            state_g = DATA_IDLE_1; // DR interupt
 538          //          }
 539          //        }
 540          //        spi_en = 0;
 541          //        break;
 542          //      }
 543          //      
 544          //      //Load Buffer 1
 545          //      case LOAD_BUFFER_1:
 546          //      {
 547          //        sector = sector_base_g + sector_offset;
 548          //        read_sector_ISR(sector, buff1);
 549          //        sector_offset++;
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 10  

 550          //        state_g = DATA_IDLE_2;
 551          //        break;
 552          //      }
 553          //      
 554          //      // Find Cluster 1
 555          //      case FIND_CLUSTER_1:
 556          //      {
 557          //        cluster_g = find_next_cluster_ISR(cluster_g, buff1);
 558          //        if(cluster_g == 0x0FFFFFFF)
 559          //        {
 560          //          play_status = 3;
 561          //          state_g = DATA_IDLE_2;
 562          //        }
 563          //        else
 564          //        {
 565          //          sector_base_g = first_sector_ISR(cluster_g);
 566          //          sector_offset = 0;
 567          //          state_g = DATA_IDLE_2;
 568          //        }
 569          //        break;
 570          //      }
 571          //      
 572          //      case DATA_IDLE_1:
 573          //      {
 574          //        if(DATA_REQ == ACTIVE)
 575          //        {
 576          //          state_g = DATA_SEND_1;
 577          //        }
 578          //        break;
 579          //      }
 580          //          
 581          //      // Data Send 2
 582          //      case DATA_SEND_2:
 583          //      {
 584          //        spi_en = 1;
 585          //        while((DATA_REQ == ACTIVE) && (TF0 == 0))                 // Can DATA_REQ go inactive while in the loop
 586          //        {
 587          //          SPI_transfer_ISR(buff1[index2_g], & temp8);               // What is temp8
 588          //          index2_g++;
 589          //          if(index2_g > 511) // Buffer 2 empty
 590          //          {
 591          //            if(play_status == 3)                                  // Works only if after FIND_CLUSTER. why?
 592          //            {
 593          //              play_status = 0;
 594          //            }
 595          //            else
 596          //            {
 597          //              state_g = LOAD_BUFFER_1; // Buff 1 and Buff 2 empty
 598          //            }
 599          //          }                                                       // No FIND_CLUSTER
 600          //          else
 601          //          {
 602          //            state_g = DATA_SEND_1; // BUFF 2 empty                //Seems like this is when buffer 2 still has stuff
 603          //          }
 604          //          TF0 = 1;                                                // What does this do? is this the interupt for the whole system to 
             -keep pace
 605          //        }
 606          //        if((DATA_REQ == INACTIVE) && (state_g == DATA_SEND_2))
 607          //        {
 608          //          if(index1_g > 511) // Buffer 1 is empty
 609          //          {
 610          //            state_g = LOAD_BUFFER_1; // DR inactive and BUFF 1 empty
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 11  

 611          //          }
 612          //          else
 613          //          {
 614          //            state_g = DATA_IDLE_2; // DR interupt
 615          //          }
 616          //        }
 617          //        spi_en = 0;
 618          //        break;
 619          //      }
 620          //      
 621          //      //Load Buffer 2
 622          //      case LOAD_BUFFER_2:
 623          //      {
 624          //        sector = sector_base_g + sector_offset;
 625          //        read_sector_ISR(sector, buff2);
 626          //        sector_offset++;
 627          //        state_g = DATA_IDLE_1;
 628          //        break;
 629          //      }
 630          //      
 631          //      // Find Cluster 2
 632          //      case FIND_CLUSTER_2:
 633          //      {
 634          //        cluster_g = find_next_cluster_ISR(cluster_g, buff2);
 635          //        if(cluster_g == 0x0FFFFFFF)
 636          //        {
 637          //          play_status = 3;
 638          //          state_g = DATA_IDLE_1;
 639          //        }
 640          //        else
 641          //        {
 642          //          sector_base_g = first_sector_ISR(cluster_g);
 643          //          sector_offset = 0;
 644          //          state_g = DATA_IDLE_1;
 645          //        }
 646          //        break;
 647          //      }
 648          //      
 649          //      case DATA_IDLE_2:
 650          //      {
 651          //        if(DATA_REQ == ACTIVE)
 652          //        {
 653          //          state_g = DATA_SEND_2;
 654          //        }
 655          //        break;
 656          //      }
 657          //      
 658          //    }   
 659          //  }
 660          //} 
 661          //  
 662          
 663          
 664          
 665          
 666          
 667          
 668          
 669          
 670          
 671          
 672            
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 12  

 673          //  while(1)
 674          //  {
 675          //    sector_base_g = FirstRootDirSec;
 676          //    while(error_flag == NO_ERRORS)
 677          //    {
 678          //      do
 679          //      {
 680          //        printf("%-35s", "Enter a Block Number: ");
 681          //        block_number = long_serial_input();
 682          //        if(block_number > number_of_entries || block_number == 0)
 683          //        {
 684          //          printf("%-35s", "Number too large.\n\r");
 685          //        }
 686          //      }while(block_number > number_of_entries || block_number == 0);
 687          //      return_entry = Read_Dir_Entry(sector_base_g, block_number, block_info);
 688          //      printf("%-20s", "return_entry");
 689          //      printf("%8.8lX", return_entry);
 690          //      putchar(10);
 691          //      putchar(13);
 692          //      next_entry = return_entry & 0x0FFFFFFF;
 693          //      if(return_entry & 0x10000000)
 694          //      {     
 695          //        printf("%-20s", "was a directory");
 696          //        putchar(10);
 697          //        putchar(13);
 698          //        sector_base_g = first_sector(next_entry);
 699          //        printf("%-20s", "sector_base_g");
 700          //        printf("%8.8lX", sector_base_g);
 701          //        putchar(10);
 702          //        putchar(13);
 703          //        number_of_entries = Print_Directory(sector_base_g, block_info);
 704          //      }
 705          //      if((return_entry & 0x10000000) == 0 && block_number !=0)
 706          //      {
 707          //        printf("%-20s", "was a file");
 708          //        Open_File(next_entry, block_info);
 709          //        number_of_entries = Print_Directory(sector_base_g, block_info);
 710          //      }
 711          //      if(return_entry & 0x80000000)
 712          //      {
 713          //        error_flag = PRINT_ERROR;
 714          //      }
 715          //    }
 716          //    if(error_flag!= NO_ERRORS)
 717          //    {
 718          //      LED4 = 0;
 719          //      putchar(10);
 720          //      putchar(13);
 721          //      printf("%-10s", "ERROR! ");
 722          //      printf("%2.2bX", error_flag);
 723          //      putchar(10);
 724          //      putchar(13);
 725          //      while(1);
 726          //    }
 727          //  }
 728          
 729              
 730              
 731              
 732              
 733              
 734              
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 13  

 735              
 736              
 737              
 738              
 739              
 740          //    if(error_flag != NO_ERRORS)
 741          //    {
 742          //      LED4 = 0;
 743          //      LCD_Clear();
 744          //      LCD_Write(COMMAND, LINE1);
 745          //      LCD_Print(1, &error_flag);
 746          //      
 747          //      delay_ms(1000); 
 748          //        printf("%2.2bX ",error_flag);       
 749          //      putchar(10);
 750          //      putchar(13);
 751          //      delay_ms(1000);
 752          //    }
 753          //    else
 754          //    {
 755          //      delay_ms(1000);
 756          //      LCD_Clear();
 757          //      LCD_Write(COMMAND, LINE1);
 758          //      LCD_Print(13, "Enter a Block");
 759          //      LCD_Write(COMMAND, LINE2);
 760          //      LCD_Print(8, "Number: ");
 761          //      //delay_ms(3000);
 762          //      
 763          //      printf("%-35s", "Enter a Block Number");
 764          //      
 765          //      block_number = long_serial_input();   // returns uint32_t 
 766          //      LCD_Clear();
 767          //      
 768          //      error_flag = read_block(block_number, block_info);
 769          //      LCD_Print(13, "Read Success!");
 770          //      print_memory(block_info,512);
 771          //      
 772          //    }
 773          
 774          //    
 775          //    
 776          //    
 777          //    
 778          ////    LCD_Write(COMMAND, LINE1);
 779          ////    LCD_Print(16, "Coltons and Matt");
 780          ////    LCD_Write(COMMAND, LINE2);
 781          ////    LCD_Print(15, "hews LCD Works!");
 782          ////    delay_ms(3000);
 783          ////    LCD_Clear();
 784          //  }
 785          
 786          //}
 787          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2045    ----
   CONSTANT SIZE    =    230    ----
   XDATA SIZE       =   1024    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =     41    ----
C51 COMPILER V9.53.0.0   MAIN                                                              12/15/2015 12:23:27 PAGE 14  

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
